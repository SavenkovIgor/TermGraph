{
    "name": "Asm",
    "terms": [
        {
            "definition": "1 {байтный} {регистр}",
            "term": "AH"
        },
        {
            "definition": "1 {байтный} {регистр}",
            "term": "AL"
        },
        {
            "definition": "8 {бит}",
            "term": "Байт"
        },
        {
            "definition": "Устройство для записи, хранения и считывания N-ого количества {бит}. Обычно размерность кратна {байту}",
            "term": "Регистр"
        },
        {
            "definition": " 16 {битный} {регистр}. Состоит из {AH} и {AL}. Регистр аккумулятор",
            "term": "AX"
        },
        {
            "definition": "1 {байтный} {регистр}",
            "term": "BH"
        },
        {
            "definition": "1 {байтный} {регистр}",
            "term": "BL"
        },
        {
            "definition": "16 {байтный} {регистр}. Состоит из {BH} и {BL}. Регистр базы",
            "term": "BX"
        },
        {
            "definition": "часть {регистра} счётчика. Размер 1 {байт}",
            "term": "CH"
        },
        {
            "definition": "часть {регистра} счётчика. Размер 1 {байт}",
            "term": "CL"
        },
        {
            "definition": " {регистр} счётчика длинной 2 {байта}. Состоит из {регистров} {CH} и {CL}",
            "term": "CX"
        },
        {
            "definition": "Часть {регистра} данных. Размер 1 {байт}",
            "term": "DL"
        },
        {
            "definition": "16 битный регистр данных. Состоит из {DH}  и {DL}",
            "term": "DX"
        },
        {
            "definition": "часть {регистра} данных. Размер 1 {байт}",
            "term": "DH"
        },
        {
            "definition": "32 {битный} {регистр}. Содержит в себе {AX}",
            "term": "EAX"
        },
        {
            "definition": "32х битный регистр. Частично перекрывает {BX}",
            "term": "EBX"
        },
        {
            "definition": "Чтобы ассемблер мог отличить 16ое число, начинающееся с буквы, от обычной метки или имени переменной, перед таким числом нужно ставить 0",
            "term": "0 префикс для 16h"
        },
        {
            "definition": "{регистр}, обычно содержащий индекс источника данных",
            "term": "SI"
        },
        {
            "definition": "{регистр}, обычно содержащий Индекс приемника",
            "term": "DI"
        },
        {
            "definition": "{Регистр} для работы со {стеком}",
            "term": "bp"
        },
        {
            "definition": "{Регистр} содержащий адрес вершины {стека}",
            "term": "SP"
        },
        {
            "definition": "{Абстрактный тип данных}. Который представляет из себя {очередь}, организованную по принципу {LIFO}. В аппаратной архитектуре, целый {сегмент} может быть выделен под стек",
            "term": "Стек"
        },
        {
            "definition": "Code segment. {Сегментный регистр} кода",
            "term": "CS"
        },
        {
            "definition": "Data segment. {сегментный регистр} данных",
            "term": "DS"
        },
        {
            "definition": "Дополнительный {сегментный регистр}",
            "term": "ES"
        },
        {
            "definition": "Stack segment. {Сегментный регистр} {стека}",
            "term": "SS"
        },
        {
            "definition": "{Арифметическая инструкция}",
            "term": "add"
        },
        {
            "definition": "",
            "term": "sub"
        },
        {
            "definition": "{арифметическая инструкция}. Увеличивает число на 1",
            "term": "inc"
        },
        {
            "definition": "",
            "term": "dec"
        },
        {
            "definition": "",
            "term": "Команда-приемник-источник"
        },
        {
            "definition": "Небольшой, отдельно адресуемый участок памяти, идущий подряд, фиксированного размера",
            "description": "Загрузка чисел напрямую в сегментные регистры запрещена",
            "term": "Сегмент"
        },
        {
            "definition": "Команда ассемблеру для установки смещения внутри сегмента памяти.",
            "term": "org 100h"
        },
        {
            "definition": "{Инструкция}",
            "term": "Арифметическая инструкции"
        },
        {
            "definition": "instruction pointer {регистр}, содержащий {адрес} {инструкции}, которая будет выполнена следующей",
            "term": "IP"
        },
        {
            "definition": "",
            "term": "В реальном режиме для адресации используется сегмент и смещение"
        },
        {
            "definition": "{Инструкция перехода} которая используется для вызова функции. Кладет в {стек} адрес возврата",
            "term": "call"
        },
        {
            "definition": "достает из {стека} только {смещение} для возврата; процедура должна находиться в том же {сегменте}, из которого ее вызывают",
            "term": "ret"
        },
        {
            "definition": "{Инструкция работы со стеком}, которая копирует переменную в {стек} и увеличивает {sp}",
            "term": "push"
        },
        {
            "definition": "{Инструкция работы со стеком}. Копирует значение из {стека} и кладет в переданную переменную, автоматически увеличивая {sp}",
            "term": "pop"
        },
        {
            "definition": "Операция запрета {прерывания}",
            "term": "cli"
        },
        {
            "definition": "Операция разрешения {прерываний}",
            "term": "sti"
        },
        {
            "definition": "Своего рода процедура, не имеющая имени но имеющая личный номер",
            "description": "Некоторые номера прерываний зарезервированы в BIOS",
            "term": "Прерывание"
        },
        {
            "definition": "Нет операнда. {Инструкция}, которая ничего не делает",
            "term": "nop"
        },
        {
            "definition": "Сравнение",
            "term": "cmp"
        },
        {
            "definition": "",
            "term": "В одинарных кавычках можно вставлять символ и он сам скастуется в ASCII"
        },
        {
            "definition": "{Инструкция условного перехода} если {флаг нуля}  установлен",
            "term": "jz"
        },
        {
            "definition": "{Регистр} процессора содержащий {флаги} описывающие его текущее состояние",
            "term": "Регистр флагов"
        },
        {
            "definition": "{Флаг} в {регистре флагов}. Устанавливается в 1 если предыдущая {команда сравнения} была верной.",
            "term": "Флаг нуля"
        },
        {
            "definition": "Команда идентичная {jz}. При ассемблировании будет заменена jz",
            "term": "je"
        },
        {
            "definition": "{Инструкция перехода}, в которой переход происходит только при выполнении определенного условия",
            "term": "Инструкция условного перехода"
        },
        {
            "definition": "Инструкция, изменяющая то, какая {инструкция} будет выполнена следующей, путем модификации регистра {ip}",
            "term": "Инструкция перехода"
        },
        {
            "definition": "",
            "term": "Инструкция безусловного перехода"
        },
        {
            "definition": "",
            "term": "jmp"
        },
        {
            "definition": "",
            "term": "Расширенный ASCII код"
        },
        {
            "definition": "1 битный {флаг} в {регистре флагов} который,  равен 1 если в результате арифметической операции произошло переполнение. carry flag. Cf",
            "term": "Флаг переноса"
        },
        {
            "definition": "Команда {условного перехода} если {флаг переноса} установлен.",
            "term": "jc"
        },
        {
            "definition": "{Инструкция условного перехода} если {флаг переноса} не установлен",
            "term": "jnc"
        },
        {
            "definition": "",
            "term": "dw"
        },
        {
            "definition": "",
            "term": "Есть нуль символ"
        },
        {
            "definition": "один или несколько {бит} памяти, характеризующие состояние какого либо объекта",
            "term": "Флаг"
        },
        {
            "definition": "Один разряд двоичного кода. Может быть только в 2х взаимоисключающих состояниях: 0 или 1. Минимальная единица информации.",
            "term": "Бит"
        },
        {
            "definition": "Программа которая постоянно находится в памяти. Часто является обработчиком прерывания",
            "term": "Резидентная программа"
        },
        {
            "definition": "",
            "term": "Перехват прерываний"
        },
        {
            "definition": "{прерывания}, которые вызывает непосредственно программа при помощи команды int (отсюда и название — программные), например, для того чтобы получить код клавиши, которую нажмет пользователь (mov ah,0/int 16h), или вывести некоторую строку на экран (mov ah,9/int 21h)",
            "term": "Программные прерывания"
        },
        {
            "definition": "{прерывания}, которые вызываются самостоятельно процессором (аппаратурой компьютера) при возникновении каких-либо событий. При этом процессор прекращает выполнение текущей программы, сохраняет в стеке регистры ss, sp и флаги, вызывает соответствующее прерывание, а затем восстанавливает сохраненные регистры и продолжает выполнение текущей программы",
            "examples": "При нажатии и отпускании какой-либо клавиши пользователем вызывается прерывание ПЗУ 09h. Или прерывание таймера (также ПЗУ) 1Ch, вызываемое автоматически примерно 18,2 раза в секунду",
            "term": "Аппаратные прывания"
        },
        {
            "definition": "аналог инструкции {push} для {регистра флагов}",
            "term": "pushf"
        },
        {
            "definition": "",
            "term": "dword"
        },
        {
            "definition": "",
            "term": "ptr"
        },
        {
            "definition": "достает из {стека} {сегмент}, {смещение} и {регистр флагов}. Используется для выхода из {прерываний}",
            "term": "iret"
        },
        {
            "definition": "аналог {инструкции} {pop} для {регистра флагов}",
            "term": "popf"
        },
        {
            "definition": "{Инструкция} обмена {регистров}",
            "term": "xchg"
        },
        {
            "definition": "Группа {инструкций}. загружает в {регистр} {ax}/{al} значение по адресу [{ds}:{si}] и автоматически увеличивает {si} на 1 или 2",
            "term": "lods"
        },
        {
            "definition": "Вариант инструкции {lods} для 1 {байта}",
            "term": "lodsb"
        },
        {
            "definition": "Вариант {инструкции} {lods} для 2 {байт}",
            "term": "lodsw"
        },
        {
            "definition": "{Регистр} указывающий на начало {сегмента}",
            "term": "Сегментный регистр"
        },
        {
            "definition": "Заносит число из {al} в {es}:{di}",
            "term": "stos"
        },
        {
            "definition": "{Инструкция} префикс. Повторит следующую за ней инструкцию столько раз, сколько указано в {cx}",
            "term": "rep"
        },
        {
            "definition": "{Логическая инструкция} {исключающее или}",
            "term": "xor"
        },
        {
            "definition": "Инструкция для работы с массивами данных, которая копирует данные из {ds}:{si} в {es}:{di} в количестве, указанном в регистре {cx}",
            "term": "movs"
        },
        {
            "definition": "Соглашение по структуре и способу расположения кода и данных в {сегментах} памяти",
            "term": "Модель памяти"
        },
        {
            "definition": "{Модель памяти} где код, данные и {стек} располагаются в одном {сегменте}",
            "term": "Tiny"
        },
        {
            "definition": "{Модель памяти} где код размещается в одном сегменте, а данные и {стек} в другом",
            "term": "Small"
        },
        {
            "definition": "",
            "term": "Счётчик"
        },
        {
            "definition": "{Модель памяти} где код располагается в одном сегменте, а данные в другом (возможно нескольких)",
            "term": "Compact"
        },
        {
            "definition": "{Модель памяти} в которой код в нескольких сегментах, а данные в одном",
            "term": "Medium"
        },
        {
            "definition": "{Модель памяти} в которой и код и данные занимают несколько сегментов",
            "term": "Large"
        },
        {
            "definition": "{Модель памяти} которая может содержать несколько {сегментов} кода и насколько сегментов данных",
            "term": "Huge"
        },
        {
            "definition": "{Модель памяти} в которой код, данные и стек находятся в одном сегменте, но используется 32х битная адресация",
            "description": "Один сегмент может иметь размер до 4х гигабайт",
            "term": "Flat"
        },
        {
            "definition": "{Инструкция работы со стеком}, которая кладет в {стек} {регистры} в следующем порядке: {ax}, {cx}, {dx}, {bx}, {sp}, {bp}, {si} и {di}. Автоматически меняет {sp}",
            "term": "pusha"
        },
        {
            "definition": "{Инструкция работы со стеком}, которая кладет в {стек} {регистры} в следующем порядке: {di}, {si}, {bp}, {sp}, {bx}, {dx}, {cx} и {ax} Автоматически меняет {sp}",
            "term": "popa"
        },
        {
            "definition": "{Инструкция} совершающая манипуляции с сегментом {стека} (указанном в {ss}) модифицируя {sp}",
            "term": "Инструкция работы со стеком"
        },
        {
            "definition": "{Операция}, которая сдвигает {биты} в числе на определенное количество шагов",
            "term": "Битовый сдвиг"
        },
        {
            "definition": "{Инструкция} {битового сдвига} влево",
            "term": "shl"
        },
        {
            "definition": "{Инструкция} {битового сдвига} вправо",
            "term": "shr"
        },
        {
            "definition": "{Арифметическая инструкция} умножения, которая умножает переданный {регистр} на al и оставляет результат в al",
            "term": "mul"
        },
        {
            "definition": "Команда дальнего перехода",
            "term": "jmp dword ptr"
        },
        {
            "definition": "достает из {стека} {сегмент} и {смещение}. {процедура} может находиться в любом {сегменте}, независимо от того, откуда ее вызывают",
            "term": "retf"
        },
        {
            "definition": "{Логическая инструкция}",
            "term": "and"
        },
        {
            "definition": "{Логическая инструкция}",
            "term": "or"
        },
        {
            "definition": "{Инструкция}, выполняющая булевы логические операции",
            "term": "Логическая инструкция"
        },
        {
            "definition": "Аналогично команде {ret}, но в дополнение достает из стека n байт",
            "term": "ret n"
        },
        {
            "definition": "",
            "term": "equ"
        },
        {
            "definition": "{Инструкция} выполняет поиск в массиве первого байта. При этом {es}:{di} содержит адрес строки, {cx} длина строки, а {al} искомый символ. В результате {di} будет указывать на символ",
            "term": "scas"
        },
        {
            "definition": "Repeat if not equal",
            "term": "repne"
        },
        {
            "definition": "Repeat if equal",
            "term": "repe"
        },
        {
            "definition": "prefix segment program",
            "term": "psp"
        },
        {
            "definition": "Инструкция, проверяющая значение отдельных {бит} в переменой. Если бит равен 1 то {флаг нуля} будет сброшен",
            "term": "test"
        },
        {
            "definition": "{Флаг} в {регистре флагов} который содержит 1 если в результате последней операции в значении было четное число {значащих разрядов}, иначе 0",
            "term": "Флаг четности"
        },
        {
            "definition": "{Флаг} в {регистре флагов}, Контролирует перенос из 3-го бита данных. Полезен при операциях над упакованными десятичными цифрами",
            "term": "Флаг внешнего переноса"
        },
        {
            "definition": "{Флаг} в {регистре флагов}. Равен 1 если в результате операции получено отрицательное число",
            "term": "Флаг знака"
        },
        {
            "definition": "{флаг} в {регистре флагов}. Равен 1, если программа выполняется по шагам, с передачей управления после каждой выполненной команды {прерыванию} с вектором 1",
            "term": "Флаг трассировки"
        },
        {
            "definition": "{Флаг} в {регистре флагов}. Содержит 1 если разрешена обработка {прерываний}",
            "term": "Флаг прерываний"
        },
        {
            "definition": "{Флаг} в {регистре флагов}. Управляет направлением передачи \nданных: если он содержит 0, то после каждой {индексной операции} \nсодержимое {индексных регистров} увеличивается на 1, в противном случае — уменьшается на 1.",
            "term": "Флаг направления"
        },
        {
            "definition": "{Флаг} в {регистре флагов}. Равен 1, если в результате операции получено число, выходящее за {разрядную сетку} процессора, т. е. число, превышающее максимальный размер {регистра} или {переменной}.",
            "term": "Флаг переполнения"
        },
        {
            "definition": "",
            "term": "PSP"
        },
        {
            "definition": "",
            "term": "DTA"
        },
        {
            "definition": "jump if below",
            "term": "jb"
        },
        {
            "definition": "jump if below or equal. {Инструкция условного перехода}. Переход выполняется если установлен {флаг переноса} или {флаг нуля}",
            "term": "jbe"
        },
        {
            "definition": "jump if not below",
            "term": "jnb"
        },
        {
            "definition": "jump if above",
            "term": "ja"
        },
        {
            "definition": "jump if above or equal",
            "term": "jae"
        },
        {
            "definition": "jump if not above",
            "term": "jna"
        },
        {
            "definition": "Инструкция, устанавливающая {флаг переноса}. set carry flag",
            "term": "stc"
        },
        {
            "definition": "Инструкция, которая сбрасывает {флаг переноса}. Clear carry flag",
            "term": "clc"
        },
        {
            "definition": "Инструкция устанавливающая {флаг направления}. Set destination flag",
            "term": "std"
        },
        {
            "definition": "Инструкция, сбрасывающая {флаг направления}. Clear destination flag",
            "term": "cld"
        },
        {
            "definition": "Floating point unit, часть {процессора}, выполняющая операции с плавающей точкой",
            "term": "FPU"
        },
        {
            "definition": "8 {регистров} {сопроцессора}",
            "term": "st(0)-st(7)"
        },
        {
            "definition": "{Инструкция} инициализации {сопроцессора}",
            "term": "finit"
        },
        {
            "definition": "{Инструкция} {FPU} integer load",
            "term": "fild"
        },
        {
            "definition": "Одна отдельная, {атомарная} операция {процессора}",
            "term": "Инструкция"
        },
        {
            "definition": "{FPU} {инструкция} сложения {сопроцессора}",
            "term": "fadd"
        },
        {
            "definition": "{FPU} integer store. Сохранение целого числа из {сопроцессора} из регистра {st 0}",
            "term": "fist"
        },
        {
            "definition": "Инструкция {fist} с дополнительным удалением значения из {st 0} fpu integer store and pop",
            "term": "fistp"
        },
        {
            "definition": "Exec parameter block",
            "term": "EPB"
        },
        {
            "definition": "",
            "description": "Программа-ассемблер (MASM, TASM, WASM, NASM и пр.) создает объектный \nфайл с расширением OBJ. Данный файл является переходным между ассемблер-\nным файлом (ASM) и программой (COM/EXE). ",
            "term": "OBJ"
        },
        {
            "definition": "64 {битный} {регистр}. Содержит а себе {EAX}",
            "term": "RAX"
        },
        {
            "definition": "{CX}",
            "term": "ECX"
        },
        {
            "definition": "{DX}",
            "term": "EDX"
        },
        {
            "definition": "Интегральная схема, выполняющая логические и математические операции",
            "term": "Процессор"
        },
        {
            "definition": "Расширенный {регистр} {SP}",
            "term": "ESP"
        },
        {
            "definition": "Расширенный {регистр} {BP}",
            "term": "EBP"
        },
        {
            "definition": "Расширенный {регистр} {SI}",
            "term": "ESI"
        },
        {
            "definition": "Расширенный {регистр} {DI}",
            "term": "EDI"
        },
        {
            "definition": "Расширенная версия регистра {IP}",
            "term": "EIP"
        },
        {
            "definition": "Расширенный {регистр флагов}",
            "term": "EFLAGS"
        },
        {
            "definition": "",
            "term": "Debug info format"
        },
        {
            "definition": "{Debug info format}",
            "term": "stabs"
        },
        {
            "definition": "{Debug info format}",
            "term": "COFF"
        },
        {
            "definition": "{Debug info format}",
            "term": "XCOFF"
        },
        {
            "definition": "{Debug info format}",
            "term": "DWARF"
        }
    ]
}
