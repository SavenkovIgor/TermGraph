{
    "name": "Information technologies",
    "terms": [
        {
            "termDef": "Информация - сведения о чем либо, независимо от формы их представления"
        },
        {
            "termDef": "Данные - {информация}, представленная в формализованном (структурированном) виде, пригодном для передачи, связи или обработки."
        },
        {
            "termDef": "Компьютерная память - физическое устройство для хранения {данных}, используемых в процессе вычисления. Условно представимо в виде длинной цепочки {байт}"
        },
        {
            "termDef": "Ячейка памяти - минимальная единица {компьютерной памяти}, к которой можно обратиться индивидуально. Размер ячейки обычно устанавливается в 1 {байт}."
        },
        {
            "termDef": "Адрес ячейки памяти - номер, который взаимно однозначно сопоставлен с какой либо {ячейкой памяти}"
        },
        {
            "termDef": "Бит - минимально возможная единица хранения {данных}. Может иметь только 2 возможных, взаимоисключающих значения 0 или 1"
        },
        {
            "termDef": "Байт - единица хранения информации, совокупность битов, обрабатываемых компьютером одновременно. В современных системах байт состоит из 8 {бит} и может принимать 256 разных значений."
        },
        {
            "termDef": "Тип данных - набор соглашений о {данных}, который определяет множество допустимых значений для данных и допустимые для них операции"
        },
        {
            "termDef": "Память с произвольным доступом - {компьютерная память}, в которой доступ к любой {ячейке памяти}  осуществляется за равные промежутки времени."
        },
        {
            "termDef": "Память с последовательным доступом - {компьютерная память}, в которой время получения доступа к {ячейке памяти} зависит от общих размеров памяти, и не осуществляется за равные промежутки времени"
        },
        {
            "termDef": "Оперативная память - энергозависимая {компьютерная память} {произвольного доступа} в которой хранятся исходные данные, промежуточные результаты вычислений и программные инструкции"
        },
        {
            "termDef": "Регистр процессора - блок {ячеек памяти} образующий сверхбыструю {оперативную память}  внутри процессора. Они как правило малого размера (несколько {байт})."
        },
        {
            "termDef": "Прерывание - сигнал от {программного обеспечения} или {аппаратного обеспечения}, сообщающий {процессору} о наступлении события, требующего немедленной реакции."
        },
        {
            "termDef": "Обработчик прерываний - "
        },
        {
            "termDef": "Исключение - ошибка возникающая в процессе выполнения {алгоритма} и делающая невозможным (бессмысленным) дальнейший процесс вычислений."
        },
        {
            "termDef": "Алгоритм - формальное описание последовательности {операций} (действий) исполнителя для достижения некоторого результата"
        },
        {
            "termDef": "Операция - некоторое действие"
        },
        {
            "termDef": "Атомарность - в широком смысле означает неделимость на более мелкие составляющие"
        },
        {
            "termDef": "Атомарная операция - непрерываемая операция это {операция} обладающая свойством {атомарности}, т.е. операция которая либо будет выполнена целиком и полностью, либо не будет выполнена вообще."
        },
        {
            "termDef": "Алфавит - чаще всего непустое конечное {множество} различных {символов}"
        },
        {
            "termDef": "Примитивный тип данных - {тип данных}, предоставляемый {языком программирования} как базовая единица самого языка."
        },
        {
            "termDef": "Процессор - {интегральная схема}, исполняющая {машинные инструкции} (программный код), главная часть аппаратного обеспечения компьютера или программируемого логического контроллера."
        },
        {
            "termDef": "Машинная инструкция - одна отдельная математическая, логическая или управляющая операция со строгой спецификацией, которая может быть выполнена с помощью комбинации электронных {логических элементов}. "
        },
        {
            "termDef": "Логические элементы - электронные устройства предназначенные для обработки {данных}, представленных в форме {цифрового сигнала}"
        },
        {
            "termDef": "Система команд - соглашение о предоставляемых архитектурой средствах программирования, а именно: {типах данных}, {инструкций}, Системы {регистров}, {методов адресации}, {моделей памяти}, способов обработки {прерываний} и {исключений}, методов ввода вывода."
        },
        {
            "termDef": "Поток - наименьшая единица обработки информации, исполнение которой может быть назначено ядром операционной системы. "
        },
        {
            "termDef": "Процесс - операция исполнения запущенной программы, которая выполняется в текущий момент. "
        },
        {
            "termDef": "Побитовая константность - физическая константность (определена в языке с++). Означает, что ни один элемент данного объекта не меняется. Гарантируется на этапе компиляции"
        },
        {
            "termDef": "Логическая константность - константность переменных и она не гарантирована в некоторых случаях"
        },
        {
            "termDef": "Инварианта - Утверждение о структуре данных, которое всегда должно быть истинно для этой структуры данных, чтобы эта структура оставалась корректной"
        },
        {
            "termDef": "Гонка - Ситуация, при которой результат работы параллельного алгоритма зависит от порядка выполнения операций"
        },
        {
            "termDef": "Гонка за данными - {Гонка} возникающая из за одновременной модификации одних и тех же данных"
        },
        {
            "termDef": "Lock free programming - "
        },
        {
            "termDef": "Машинное слово - "
        },
        {
            "termDef": "Выравнивание памяти - "
        },
        {
            "termDef": "Кэш инструкций - "
        },
        {
            "termDef": "Кэш данных - "
        },
        {
            "termDef": "Буфер ассоциативной трансляции TLB - "
        },
        {
            "termDef": "8086 - Архитектура процессора"
        },
        {
            "termDef": "14 регистров - {8086}"
        },
        {
            "termDef": "80186 - "
        },
        {
            "termDef": "SIMD - "
        },
        {
            "termDef": "MIMD - "
        },
        {
            "termDef": "Goal oriented action planning - Подход к программированию ии в играх"
        },
        {
            "termDef": "Iommu - "
        },
        {
            "termDef": "Mmx - Набор инструкций для ускорения фото аудио и видео"
        },
        {
            "termDef": "SSE - Streaming {SIMD} Extensions"
        },
        {
            "termDef": "SSE2 - "
        },
        {
            "termDef": "SSE3 - "
        },
        {
            "termDef": "SSSE3 - "
        },
        {
            "termDef": "SSE 4.1 - "
        },
        {
            "termDef": "SSE 4.2 - "
        },
        {
            "termDef": "SSE4A(SSE128) - "
        },
        {
            "termDef": "AES - "
        },
        {
            "termDef": "AVX - "
        },
        {
            "termDef": "AVX2 - "
        },
        {
            "termDef": "FMA - "
        },
        {
            "termDef": "NX, XD, EVP - "
        },
        {
            "termDef": "XOP - "
        },
        {
            "termDef": "HT, SMT - Hyper threading, Simultaneous multi threading"
        },
        {
            "termDef": "Turbo Boost, Turbo core - "
        },
        {
            "termDef": "TXT, MPX, SGX, SMEP, SMAP - "
        },
        {
            "termDef": "TSX - "
        },
        {
            "termDef": "ACPI - "
        },
        {
            "termDef": "BMI, TBM, ABM - "
        },
        {
            "termDef": "F16C - "
        },
        {
            "termDef": "AST - Abstract syntax tree"
        },
        {
            "termDef": "Абстракция - модель реального объекта или феномена, ограниченная выбранным контекстном, которая имеет все детали с высокой точностью соответствующие данному контексту, и опускающая остальные детали"
        },
        {
            "termDef": "Полиморфизм - "
        },
        {
            "termDef": "Инкапсуляция - способность объекта  спрятать часть своего состояния и поведения от других объектов, показывая только ограниченный {интерфейс} остальной {программе}"
        },
        {
            "termDef": "Наследование - Вариант {реализации}, но от {класса}"
        },
        {
            "termDef": "Интерфейс - в определенном смысле фиксированная договоренность способа взаимодействия между объектами каких либо {классов}"
        },
        {
            "termDef": "Класс - {Абстрактный тип данных}"
        },
        {
            "termDef": "Абстрактный тип данных - математическая модель {типа данных}"
        },
        {
            "termDef": "Зависимость - {Отношение между классами}, при котором один {класс} не может работать без другого"
        },
        {
            "termDef": "Отношение между классами - "
        },
        {
            "termDef": "Ассоциация - вариант {зависимости} при котором один {класс} доступен во всех точках другого {класса}. Отношение один к одному"
        },
        {
            "termDef": "Агрегация - Вид {ассоциации} с отношением {один ко многим} или {многие ко многим}"
        },
        {
            "termDef": "Композиция - вариант {агрегации} с отношением {один ко многим}"
        },
        {
            "termDef": "Реализация  - вариант {зависимости}, от {интерфейса}"
        },
        {
            "termDef": "NLP - "
        },
        {
            "termDef": "Лемматизация - процесс приведения слова к канонической форме. Часть процесса {NLP}"
        },
        {
            "termDef": "FMA instruction set - "
        },
        {
            "termDef": "Интерполяция строк - "
        },
        {
            "termDef": "Callback hell - "
        },
        {
            "termDef": "Pyramid of doom - "
        },
        {
            "termDef": "Программное обеспечение - множество {программ}, используемых для {управления} {вычислительным устройством}"
        },
        {
            "termDef": "Аппаратное обеспечение - электронные и механические части {вычислительного устройства}"
        },
        {
            "termDef": "Вычислительное устройство - {система}, способная выполнять какой либо {алгоритм} либо их множество"
        },
        {
            "termDef": "Вычисление - математическое преобразование, позволяющее преобразовывать входящий поток {информации} в выходной, с отличной от первого структурой"
        },
        {
            "termDef": "Программа - набор {инструкций} и {данных}, позволяющий {аппаратному обеспечению} {вычислительной системы} выполнять {вычисления} или функции {управления}"
        },
        {
            "termDef": "Управление - "
        },
        {
            "termDef": "Центральный процессор - электронный блок либо {интегральная схема}, исполняющая {машинные инструкции}, главная часть {аппаратного обеспечения} {компьютера}"
        },
        {
            "termDef": "Компьютер - электронное {вычислительное устройство}"
        },
        {
            "termDef": "Массив - {упорядоченный контейнер}, с {произвольным доступом} к {элементам}"
        },
        {
            "termDef": "Список - {упорядоченный контейнер}, с {последовательным доступом} к {элементам}"
        },
        {
            "termDef": "Стек - {упорядоченный контейнер}, с {last in first out доступом} к {элементам}"
        },
        {
            "termDef": "Очередь - "
        },
        {
            "termDef": "Кортеж - "
        },
        {
            "termDef": "Словарь - "
        },
        {
            "termDef": "Строка - "
        },
        {
            "termDef": "Язык программирования - {формальный язык}, предназначенный для записи {программ}"
        },
        {
            "termDef": "Контейнерный тип данных - {тип данных}, способный содержать внутри себя множество однотипных элементов"
        },
        {
            "termDef": "Формальный язык - {множество} конечных {формальных слов} над конечным {алфавитом}"
        },
        {
            "termDef": "Символ - неиконический знак, изображение, не имеющее видимого сходства с обозначаемой сущностью. Обладает {атомарностью}"
        },
        {
            "termDef": "Сущность - "
        },
        {
            "termDef": "Свойство - "
        },
        {
            "termDef": "Множество - группа, совокупность некоторых {элементов}, объединенных некоторым {свойством}"
        },
        {
            "termDef": "Элемент - {сущность}"
        },
        {
            "termDef": "Последовательность - {множество}, в котором важен не только набор {элементов}, но и их порядок"
        },
        {
            "termDef": "Последовательный доступ - свойство {упорядоченного контейнера} означающее, что доступ к {элементам}  происходит только в заранее заданном порядке, тем дольше, чем дальше {элемент}  расположен от края в {контейнере}"
        },
        {
            "termDef": "Экземпляр - область {памяти}, соответствующая определенному {типу данных}, с точки зрения {языка программирования}"
        },
        {
            "termDef": "Контейнер - {контейнерный тип данных}"
        },
        {
            "termDef": "Произвольный доступ - свойство {упорядоченного контейнера} означающее, что доступ к {элементам}  происходит за одинаковые промежутки времени, не зависящие от положения {элемента} в {контейнере}"
        },
        {
            "termDef": "Упорядоченный контейнер - {контейнер} в котором {элементы} хранятся в строгой {последовательности}"
        },
        {
            "termDef": "condition_variable - Условная переменная которая может запустить поток после наступления события. {Примитив синхронизации}"
        },
        {
            "termDef": "size_t  - Вычислимый тип, который устанавливается в зависимости от платформы и выбирается по принципу возможности адресовать наибольший размер контейнера"
        },
        {
            "termDef": "future - {Примитив синхронизации}"
        },
        {
            "termDef": "std::shared_future - {future}"
        },
        {
            "termDef": "async - {future} {многопоточные инструменты} в namespace {stl}"
        },
        {
            "termDef": "promise - {Примитив синхронизации} {future} {многопоточные инструменты} в namespace {stl}"
        },
        {
            "termDef": "Примитивы синхронизации - {Конкуренция за ресурсы software}"
        },
        {
            "termDef": "mutex - {Примитив синхронизации} в namespace {stl}"
        },
        {
            "termDef": "Стабильные часы -  {часы}, ходящие с постояным {тактовым периодом} и не допускающие подведения. Более  позднее обращение к таким {часам} всегда вернёт больше значение, даже если системные часы подводили"
        },
        {
            "termDef": "Системные часы - {Часы}, показывающие текущее системное время (может быть переведено)"
        },
        {
            "termDef": "Интервальный таймаут - {Таймаут}, происходящий через определенное количество времени после начала"
        },
        {
            "termDef": "Абсолютный таймаут - {Таймаут}, происходящий в определенный, заранее заданный абсолютным способом момент времени"
        },
        {
            "termDef": "Таймаут - Событие, сообщающее об окончании какого либо временного интервала"
        },
        {
            "termDef": "Часы - источник {данных} о {времени}"
        },
        {
            "termDef": "Тактовый период - Значение определяющее, как часто {часы} будут делать такт. Задается в виде числа долей секунды"
        },
        {
            "termDef": "Эпоха часов - Значение в прошлом от которого отсчитываются данные {часы}"
        },
        {
            "termDef": "time_since_epoch - {функция} в {stl} возвращающая количество {времени} прошедшее с начала {эпохи часов}"
        },
        {
            "termDef": "recursive_mutex - Рекурсивный вариант {mutex} в неймспейсе {stl}"
        },
        {
            "termDef": "std::type_info - "
        },
        {
            "termDef": "Атомарные типы - "
        },
        {
            "termDef": "Атомарные операции - "
        },
        {
            "termDef": "Объект в смысле С++ - "
        },
        {
            "termDef": "is_lock_free - Функция, проверяющая, что {атомарный тип} истинно атомарен на уровне процессора, а не проэмулирован"
        },
        {
            "termDef": "volatile - "
        },
        {
            "termDef": "Copy on write - "
        },
        {
            "termDef": "Perfect forwarding - "
        },
        {
            "termDef": "Кэш дружелюбный код - "
        },
        {
            "termDef": "PDS passive data structure - "
        },
        {
            "termDef": "std::forward_list - "
        },
        {
            "termDef": "Переопределение - "
        },
        {
            "termDef": "Перегрузка - "
        },
        {
            "termDef": "Deque - Double ended queue"
        },
        {
            "termDef": "SFINAE - "
        },
        {
            "termDef": "rvalue - {xvalue}, a temporary object or value that is not associated with object"
        },
        {
            "termDef": "lvalue - function or object"
        },
        {
            "termDef": "xvalue - expiring value, an object near the end of lifetime"
        },
        {
            "termDef": "glvalue - {lvalue} or {xvalue}"
        },
        {
            "termDef": "prvalue - {rvalue}, that is not {xvalue} (pure rvalue)"
        },
        {
            "termDef": "NRVO - {named return value optimization}"
        },
        {
            "termDef": "ODR - {one definition rule}"
        },
        {
            "termDef": "ODR violation - "
        },
        {
            "termDef": "nibloid - "
        },
        {
            "termDef": "voldemort type - "
        },
        {
            "termDef": "Инструментарий языка - "
        },
        {
            "termDef": "Ui фреймворк - {Инструментарий языка}"
        },
        {
            "termDef": "Пакетный менеджер - {Инструментарий языка}"
        },
        {
            "termDef": "Справка - {Инструментарий языка}"
        },
        {
            "termDef": "Статический анализатор - {Инструментарий языка}"
        },
        {
            "termDef": "Динамический анализатор - {Инструментарий языка}"
        },
        {
            "termDef": "Линтер - {Инструментарий языка}"
        },
        {
            "termDef": "Система сборки - {Инструментарий языка}"
        },
        {
            "termDef": "Ide - {Инструментарий языка}"
        },
        {
            "termDef": "Система контроля версий - {Инструментарий языка}"
        },
        {
            "termDef": "Компилятор - {Инструментарий языка}"
        },
        {
            "termDef": "Argument dependent lookup - "
        },
        {
            "termDef": "Многопоточные инструменты - "
        },
        {
            "termDef": "thread - {многопоточные инструменты} в namespace {stl}"
        },
        {
            "termDef": "std::conditional_variable - "
        },
        {
            "termDef": "Синхронизация параллельных операций - "
        },
        {
            "termDef": "default_random_engine - "
        },
        {
            "termDef": "uniform_int_distribution - "
        },
        {
            "termDef": "Чистая функция - {Функциональное программирование}"
        },
        {
            "termDef": "Lifting - {Функциональное программирование}"
        },
        {
            "termDef": "Карринг - {Функциональное программирование}"
        },
        {
            "termDef": "Function lifting - {Функциональное программирование}"
        },
        {
            "termDef": "Функциональное программирование - "
        },
        {
            "termDef": "Named return value optimization - {оптимизация компилятора}"
        },
        {
            "termDef": "Оптимизация компилятора - "
        },
        {
            "termDef": "Recoverable error - "
        },
        {
            "termDef": "Error - "
        },
        {
            "termDef": "Programming bug - "
        },
        {
            "termDef": "Abstract machine corruption - "
        },
        {
            "termDef": "Exceprtion - "
        },
        {
            "termDef": "Error code - "
        },
        {
            "termDef": "Pre contract - "
        },
        {
            "termDef": "Post contract - "
        },
        {
            "termDef": "Stack overflow - {ошибка} переполнения {стека вызовов}"
        },
        {
            "termDef": "Heap overflow - "
        },
        {
            "termDef": "Only runtime errors sould be reported to the calling code - "
        },
        {
            "termDef": "Императивная парадигма - "
        },
        {
            "termDef": "Объектно ориентированная парадигма - "
        },
        {
            "termDef": "Функциональная парадигма - "
        },
        {
            "termDef": "Декларативная парадигма - "
        },
        {
            "termDef": "Модульность - "
        },
        {
            "termDef": "Разделение ответственности - "
        },
        {
            "termDef": "Solid - "
        },
        {
            "termDef": "SOLID - "
        },
        {
            "termDef": "Переменная - {экземпляр}, имеющий имя"
        },
        {
            "termDef": "One definition rule - "
        },
        {
            "termDef": "Формальное слово - последовательность {символов} {алфавита}"
        },
        {
            "termDef": "C++ - {язык программирования}"
        },
        {
            "termDef": "Объект - {экземпляр} {класса}"
        },
        {
            "termDef": "Время жизни - "
        },
        {
            "termDef": "Память - {компьютерная память}"
        },
        {
            "termDef": "Пользовательский тип данных - "
        },
        {
            "termDef": "Функция - "
        },
        {
            "termDef": "STL - стандартная {библиотека} {c++}"
        },
        {
            "termDef": "Standard template library - {stl}"
        },
        {
            "termDef": "LIFO - {last in first out}"
        },
        {
            "termDef": "Last in first out доступ - свойство {упорядоченного контейнера} означающее, что доступ к {элементам}  происходит только с одной стороны контейнера, по принципу \"последний пришел, первый вышел\""
        },
        {
            "termDef": "Стек вызовов - {стек}, хранящий информацию о вызванных {функциях}, состоянии их {аргументов} и {локальных переменных}"
        },
        {
            "termDef": "Ассоциативный контейнер - "
        },
        {
            "termDef": "Корректность - {проблема параллелизма}"
        },
        {
            "termDef": "проблема параллелизма - "
        },
        {
            "termDef": "Производительность - {проблема параллелизма}"
        },
        {
            "termDef": "Алгоритмы - {проблема параллелизма}"
        },
        {
            "termDef": "Абстракции - {проблема параллелизма}"
        },
        {
            "termDef": "Data race - {корректность}"
        },
        {
            "termDef": "Race condition - {корректность}"
        },
        {
            "termDef": "Недостаточно строгий memory_order - {race condition}"
        },
        {
            "termDef": "Проблема ABA - {race condition}"
        },
        {
            "termDef": "Priority inversion - {корректность} "
        },
        {
            "termDef": "Deadlock - {корректность}"
        },
        {
            "termDef": "Livelock - {корректность}"
        },
        {
            "termDef": "Время жизни объектов - {корректность}"
        },
        {
            "termDef": "Fault injection - "
        },
        {
            "termDef": "Fuzzing - "
        },
        {
            "termDef": "Формальная верификация  - "
        },
        {
            "termDef": "Конкуренция за ресурсы hardware - {производительность}"
        },
        {
            "termDef": "Конкуренция за ресурсы software - {производительность}"
        },
        {
            "termDef": "Ядра Cpu - {Конкуренция за ресурсы hardware}"
        },
        {
            "termDef": "Caches - {Конкуренция за ресурсы hardware}"
        },
        {
            "termDef": "Pages - {Конкуренция за ресурсы hardware}"
        },
        {
            "termDef": "Планировщик ос - {Конкуренция за ресурсы software}"
        },
        {
            "termDef": "Квант времени - {Конкуренция за ресурсы software}"
        },
        {
            "termDef": "Аллокатор - {Конкуренция за ресурсы software}"
        },
        {
            "termDef": "Thread pool - "
        },
        {
            "termDef": "Thread local arena - "
        }
    ]
}
